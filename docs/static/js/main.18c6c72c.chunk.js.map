{"version":3,"sources":["app/controls/control.module.scss","app/App.module.scss","app/CitiesCanvas.tsx","app/controls/FindPathByNearestNeighbourControl.tsx","app/controls/FindPathByRandomControl.tsx","app/controls/GenerateCitiesControl.tsx","app/utils.tsx","app/controls/FindPathByGaByBookControl.tsx","app/controls/FindPathByGaByMeControl.tsx","app/App.tsx","algorithms/common/memoize.ts","algorithms/common/points.ts","algorithms/common/cities.ts","algorithms/genetic/common/fitness.ts","algorithms/common/index.ts","algorithms/genetic/common/selection.ts","algorithms/genetic/common/crossover.ts","algorithms/common/shuffle.ts","algorithms/genetic/common/mutation.ts","algorithms/genetic/common/Population.ts","state/RootState.ts","index.tsx","algorithms/math/findPathByNearestNeighbour.ts","algorithms/genetic/findPathByGaByBook.ts","algorithms/genetic/findPathByGaByMe.ts"],"names":["module","exports","control","host","leftPane","rightPane","CitiesCanvas","observer","_ref","cities","path","react_default","a","createElement","viewBox","preserveAspectRatio","style","maxWidth","maxHeight","id","markerWidth","markerHeight","refX","refY","orient","d","fill","map","city","i","nextCity","length","key","x1","x","y1","y","x2","y2","strokeWidth","stroke","markerEnd","cx","cy","r","FindPathByNearestNeighbourControl","state","className","css","Row","Col","pathLengthByNearestNeighbour","toFixed","Button_default","onClick","findPathByNearestNeighbour","FindPathByRandomControl","pathLengthByRandom","findPathByRandom","GenerateCitiesControl","handler","Form","onSubmit","generateByLastChoice","e","preventDefault","FormControl","value","nrOfCities","toString","onChange","target","type","placeholder","generateCitiesByRandom","generateCitiesInCircle","FindPathByGaByBookControl","pathLengthByGaByBook","generationsOfGaByBook","terminateGaByBook","findPathByGaByBook","populationOfGaByBook","InputGroup","Prepend","Text","crossoverRateOfGaByBook","mutationRateOfGaByBook","elitismRateOfGaByBook","FindPathByGaByMeControl","pathLengthByGaByMe","generationsOfGaByMe","terminateGaByMe","findPathByGaByMe","populationOfGaByMe","App","memoizeByRef","func","cache","WeakMap","arg","cached","get","undefined","set","distance","p1","p2","Math","sqrt","pow","pathLength","reduce","sum","point","cityId","newCityByAngle","degree","in2Pi","PI","cos","sin","fitnessSym","Symbol","addFitness","candidate","randomExclusive","maxExclusive","floor","random","randomInclusive","minInclusive","maxInclusive","repick","population","exclude","pickFn","filter","c","console","warn","checkPopulationLength","Error","accumulatedFitnessSym","addAccumulatedFitness","accumulator","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","err","return","pickRoulette","pick","elite","pickTarget","fitnessSum","firstIndex","lastIndex","middleIndex","middle","candidates","crossoverOrder1","parent1","parent2","start","end","parent1Iter","child1","child1Set","Set","parent2Iter","child2","child2Set","add","fillMissing","index","child","childSet","parentIter","parentGene","has","reverse","slice","shuffle","array","temporaryValue","randomIndex","shuffled","arguments","Object","toConsumableArray","currentIndex","mutateSwap1","mutated","index1","index2","mutateDeleteAndRepair","mutationRate","rate","chromosomeLength","mutationRatePerGene","deleted","deletedIndexes","push","Population","isSortedByFitness","classCallCheck","this","_Symbol$iterator","bind","createClass","sort","b","predicate","count","rootState","_class","RootState","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","pathByNearestNeighbour","pathByRandom","pathByGaByBook","pathByGaByMe","stopGAs","generatorChoice","max","resetCities","points","unvisited","current","delete","size","values","minCity","minDist","dist","_this","min","args","generations","populationSize","maxGenerations","Infinity","maxStaleGenerations","sortByFitnessAsc","isTerminated","staleGenerations","bestFitness","evolution","setInterval","newPopulation","elitismRate","elites","crossoverRate","mate","concat","clearInterval","reporting","toJS","report","_this2","tempPopulation","iter","tempIter","tempCandidate","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","computed","ReactDOM","render","app_App","document","getElementById"],"mappings":"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","file":"static/js/main.18c6c72c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"control_control__DS1s6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"host\":\"App_host__3eHjI\",\"leftPane\":\"App_leftPane__OwZEZ\",\"rightPane\":\"App_rightPane__3rn_z\"};","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { City } from '../algorithms/common/cities';\r\n\r\nexport const CitiesCanvas = observer<{ cities: City[]; path: City[] }>(({ cities, path }) => (\r\n  <svg\r\n    viewBox={`-0.05 -0.05 1.1 1.1`}\r\n    preserveAspectRatio=\"xMidYMid\"\r\n    style={{ maxWidth: '100%', maxHeight: '100%' }}\r\n  >\r\n    <defs>\r\n      <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"5\" refY=\"2\" orient=\"auto\">\r\n        <path d=\"M0,0 L0,4 L3,2 z\" fill=\"lime\" />\r\n      </marker>\r\n    </defs>\r\n    {path.map((city, i) => {\r\n      const nextCity = path[(i + 1) % path.length];\r\n      return (\r\n        <line\r\n          key={city.id}\r\n          x1={city.x}\r\n          y1={city.y}\r\n          x2={nextCity.x}\r\n          y2={nextCity.y}\r\n          strokeWidth=\"0.003\"\r\n          stroke=\"lime\"\r\n          markerEnd=\"url(#arrow)\"\r\n        />\r\n      );\r\n    })}\r\n    {cities.map(city => (\r\n      <circle key={city.id} cx={city.x} cy={city.y} r=\"0.005\" fill=\"red\" />\r\n    ))}\r\n    <circle cx={cities[0].x} cy={cities[0].y} r=\"0.003\" fill=\"yellow\" />\r\n  </svg>\r\n));\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\nimport css from './control.module.scss';\r\n\r\nexport const FindPathByNearestNeighbourControl = observer<{\r\n  state: { findPathByNearestNeighbour: Function; pathLengthByNearestNeighbour: number };\r\n}>(({ state }) => (\r\n  <div className={css.control + ' my-3'}>\r\n    <h6>Nearest Neighbour</h6>\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Length: {state.pathLengthByNearestNeighbour.toFixed(2)}</Col>\r\n      <Col className=\"my-auto\">\r\n        <Button className=\"w-100\" onClick={() => state.findPathByNearestNeighbour()}>\r\n          find\r\n        </Button>\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n));\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\nimport css from './control.module.scss';\r\n\r\nexport const FindPathByRandomControl = observer<{\r\n  state: { findPathByRandom: Function; pathLengthByRandom: number };\r\n}>(({ state }) => (\r\n  <div className={css.control + ' my-3'}>\r\n    <h6>Random</h6>\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Length: {state.pathLengthByRandom.toFixed(2)}</Col>\r\n      <Col className=\"my-auto\">\r\n        <Button className=\"w-100\" onClick={() => state.findPathByRandom()}>\r\n          find\r\n        </Button>\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n));\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Col, Form, FormControl, Row } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\nimport { pd } from '../utils';\r\nimport css from './control.module.scss';\r\n\r\nexport const GenerateCitiesControl = observer<{\r\n  state: {\r\n    generateByLastChoice: Function;\r\n    generateCitiesByRandom: Function;\r\n    generateCitiesInCircle: Function;\r\n    nrOfCities: number;\r\n  };\r\n}>(({ state }) => (\r\n  <div className={css.control + ' my-3'}>\r\n    <h6>Generate cities</h6>\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Count</Col>\r\n      <Col>\r\n        <Form onSubmit={pd(() => state.generateByLastChoice())}>\r\n          <FormControl\r\n            value={state.nrOfCities != null ? state.nrOfCities.toString() : ''}\r\n            onChange={(e: any) => (state.nrOfCities = +e.target.value)}\r\n            type=\"number\"\r\n            placeholder=\"Number of cities\"\r\n          />\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"my-2\">\r\n      <Col>\r\n        <Button className=\"w-100\" onClick={() => state.generateCitiesByRandom()}>\r\n          random\r\n        </Button>\r\n      </Col>\r\n      <Col>\r\n        <Button className=\"w-100\" onClick={() => state.generateCitiesInCircle()}>\r\n          circle\r\n        </Button>\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n));\r\n","/**\r\n * prevent default\r\n */\r\nexport function pd<T extends Function>(handler: T) {\r\n  return (e: { preventDefault: Function }) => {\r\n    e.preventDefault();\r\n    handler(e);\r\n  };\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Col, FormControl, Row, InputGroup } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\nimport { RootState } from '../../state/RootState';\r\nimport css from './control.module.scss';\r\n\r\nexport const FindPathByGaByBookControl = observer<{ state: RootState }>(({ state }) => (\r\n  <div className={css.control + ' my-3'}>\r\n    <h6>GA by the book</h6>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">\r\n        <div>Length: {state.pathLengthByGaByBook.toFixed(2)}</div>\r\n        <div className=\"small\">Generation: {state.generationsOfGaByBook}</div>\r\n      </Col>\r\n      <Col className=\"my-auto\">\r\n        {state.terminateGaByBook ? (\r\n          <Button className=\"w-100 bg-secondary\" onClick={() => state.terminateGaByBook!()}>\r\n            stop\r\n          </Button>\r\n        ) : (\r\n          <Button className=\"w-100\" onClick={() => state.findPathByGaByBook()}>\r\n            find\r\n          </Button>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Population size</Col>\r\n      <Col>\r\n        <FormControl\r\n          value={state.populationOfGaByBook != null ? state.populationOfGaByBook.toString() : ''}\r\n          onChange={(e: any) => (state.populationOfGaByBook = +e.target.value)}\r\n          type=\"number\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Crossover rate</Col>\r\n      <Col>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">%</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={\r\n              state.crossoverRateOfGaByBook != null\r\n                ? (state.crossoverRateOfGaByBook * 100).toString()\r\n                : ''\r\n            }\r\n            onChange={(e: any) => (state.crossoverRateOfGaByBook = +e.target.value / 100)}\r\n            type=\"number\"\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Mutation rate</Col>\r\n      <Col>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">%</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={\r\n              state.mutationRateOfGaByBook != null\r\n                ? (state.mutationRateOfGaByBook * 100).toString()\r\n                : ''\r\n            }\r\n            onChange={(e: any) => (state.mutationRateOfGaByBook = +e.target.value / 100)}\r\n            type=\"number\"\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Elitism rate</Col>\r\n      <Col>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">%</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={\r\n              state.elitismRateOfGaByBook != null\r\n                ? (state.elitismRateOfGaByBook * 100).toString()\r\n                : ''\r\n            }\r\n            onChange={(e: any) => (state.elitismRateOfGaByBook = +e.target.value / 100)}\r\n            type=\"number\"\r\n          />\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n));\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Col, FormControl, Row } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\nimport { RootState } from '../../state/RootState';\r\nimport css from './control.module.scss';\r\n\r\nexport const FindPathByGaByMeControl = observer<{ state: RootState }>(({ state }) => (\r\n  <div className={css.control + ' my-3'}>\r\n    <h6>GA by osi-oswald {'😎'}</h6>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">\r\n        <div>Length: {state.pathLengthByGaByMe.toFixed(2)}</div>\r\n        <div className=\"small\">Generation: {state.generationsOfGaByMe}</div>\r\n      </Col>\r\n      <Col className=\"my-auto\">\r\n        {state.terminateGaByMe ? (\r\n          <Button className=\"w-100 bg-secondary\" onClick={() => state.terminateGaByMe!()}>\r\n            stop\r\n          </Button>\r\n        ) : (\r\n          <Button className=\"w-100\" onClick={() => state.findPathByGaByMe()}>\r\n            find\r\n          </Button>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n\r\n    <Row className=\"my-2\">\r\n      <Col className=\"my-auto\">Population size</Col>\r\n      <Col>\r\n        <FormControl\r\n          value={state.populationOfGaByMe != null ? state.populationOfGaByMe.toString() : ''}\r\n          onChange={(e: any) => (state.populationOfGaByMe = +e.target.value)}\r\n          type=\"number\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n));\r\n","import React from 'react';\r\nimport css from './App.module.scss';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RootState } from '../state/RootState';\r\nimport { CitiesCanvas } from './CitiesCanvas';\r\nimport { FindPathByNearestNeighbourControl } from './controls/FindPathByNearestNeighbourControl';\r\nimport { FindPathByRandomControl } from './controls/FindPathByRandomControl';\r\nimport { GenerateCitiesControl } from './controls/GenerateCitiesControl';\r\nimport { FindPathByGaByBookControl } from './controls/FindPathByGaByBookControl';\r\nimport { FindPathByGaByMeControl } from './controls/FindPathByGaByMeControl';\r\n\r\nconst App = observer<{ state: RootState }>(({ state }) => (\r\n  <div className={css.host}>\r\n    <div className={css.leftPane + ' p-3'}>\r\n      <h2>Traveling Salesman</h2>\r\n      <GenerateCitiesControl state={state} />\r\n      <FindPathByRandomControl state={state} />\r\n      <FindPathByNearestNeighbourControl state={state} />\r\n      <FindPathByGaByBookControl state={state} />\r\n      <FindPathByGaByMeControl state={state} />\r\n    </div>\r\n    <div className={css.rightPane}>\r\n      <CitiesCanvas cities={state.cities} path={state.path} />\r\n    </div>\r\n  </div>\r\n));\r\n\r\nexport default App;\r\n","/**\r\n * Note: Won't cache return value of undefined\r\n */\r\nexport function memoizeByRef<R, T extends object>(func: (arg: T) => R): (arg: T) => R {\r\n  const cache = new WeakMap<T, R>();\r\n  return function(arg: T) {\r\n    let cached = cache.get(arg);\r\n    if (cached === undefined) {\r\n      cached = func(arg);\r\n      cache.set(arg, cached);\r\n    }\r\n    return cached;\r\n  };\r\n}\r\n","import { memoizeByRef } from './memoize';\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport function distance(p1: Point, p2: Point) {\r\n  return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\r\n}\r\n\r\nexport const pathLength = memoizeByRef(function pathLength(path: Point[]) {\r\n  return path.reduce((sum, point, i) => sum + distance(point, path[(i + 1) % path.length]), 0);\r\n});\r\n","import { Point } from './points';\r\n\r\nexport let cityId = 1;\r\n\r\nexport interface City extends Point {\r\n  id: number;\r\n}\r\n\r\nexport function newCityByRandom(): City {\r\n  return {\r\n    id: cityId++,\r\n    x: Math.random(),\r\n    y: Math.random()\r\n  };\r\n}\r\n\r\nexport function newCityByAngle(degree: number): City {\r\n  const in2Pi = (2 * Math.PI * degree) / 360;\r\n  return {\r\n    id: cityId++,\r\n    x: Math.cos(in2Pi) * 0.5 + 0.5,\r\n    y: Math.sin(in2Pi) * 0.5 + 0.5\r\n  };\r\n}\r\n\r\nexport function generateCitiesByRandom(nrOfCities: number) {\r\n  const cities: City[] = [];\r\n  for (let i = 0; i < nrOfCities; i++) {\r\n    cities.push(newCityByRandom());\r\n  }\r\n  return cities;\r\n}\r\n\r\nexport function generateCitiesInCircle(nrOfCities: number) {\r\n  const cities: City[] = [];\r\n  for (let i = 0; i < nrOfCities; i++) {\r\n    cities.push(newCityByAngle((360 * i) / nrOfCities));\r\n  }\r\n  return cities;\r\n}\r\n","import { pathLength, Point } from '../../common/points';\r\nimport { Chromosome, Gene } from './index';\r\n\r\nexport function fitness(path: Point[]): number {\r\n  return pathLength(path);\r\n}\r\n\r\nexport const fitnessSym = Symbol('fitness');\r\n\r\nexport function addFitness<T extends Point>(candidate: Gene<T>[]): Chromosome<T> {\r\n  candidate[fitnessSym] = fitness(candidate);\r\n  return candidate as Chromosome<T>;\r\n}\r\n","export function randomExclusive(maxExclusive: number) {\r\n  return Math.floor(Math.random() * maxExclusive);\r\n}\r\n\r\nexport function randomInclusive(minInclusive: number, maxInclusive: number) {\r\n  return Math.floor(Math.random() * (maxInclusive - minInclusive + 1) + minInclusive);\r\n}\r\n","import { fitnessSym } from './fitness';\r\nimport { randomExclusive } from '../../common';\r\nimport { Chromosome } from './index';\r\nimport { Population } from './Population';\r\nimport { memoizeByRef } from '../../common/memoize';\r\n\r\nfunction repick<T>(\r\n  population: Population<T>,\r\n  exclude: Chromosome<T>,\r\n  pickFn: (p: Population<T>) => Chromosome<T>\r\n): Chromosome<T> {\r\n  population = population.filter(c => c !== exclude);\r\n  if (population.length === 0) {\r\n    console.warn('repick: all candidates matched the exclude candidate');\r\n    return exclude;\r\n  } else {\r\n    return pickFn(population);\r\n  }\r\n}\r\n\r\nfunction checkPopulationLength(population: Population) {\r\n  if (!population.length) {\r\n    throw new Error('pickRoulette: population size must be > 0');\r\n  }\r\n}\r\n\r\nexport function pickRandom<T>(population: Population<T>, exclude?: Chromosome<T>): Chromosome<T> {\r\n  checkPopulationLength(population);\r\n\r\n  let pick = population[randomExclusive(population.length)];\r\n  return pick === exclude ? repick(population, exclude!, pickRandom) : pick;\r\n}\r\n\r\nconst accumulatedFitnessSym = Symbol('accumulatedFitness');\r\n\r\nconst addAccumulatedFitness = memoizeByRef(function addAccumulatedFitness<T>(\r\n  population: Population<T>\r\n) {\r\n  let accumulator = 0;\r\n  for (const candidate of population) {\r\n    accumulator += candidate[fitnessSym];\r\n    candidate[accumulatedFitnessSym] = accumulator;\r\n  }\r\n  return true;\r\n});\r\n\r\nexport function pickRoulette<T>(population: Population<T>, exclude?: Chromosome<T>): Chromosome<T> {\r\n  checkPopulationLength(population);\r\n\r\n  let pick = population.elite;\r\n  const pickTarget = Math.random() * population.fitnessSum;\r\n  addAccumulatedFitness(population);\r\n\r\n  if (pickTarget >= population.elite[fitnessSym]) {\r\n    // using binary search\r\n    let firstIndex = 0;\r\n    let lastIndex = population.length - 1;\r\n    let middleIndex = Math.floor((lastIndex + firstIndex) / 2);\r\n    let middle = population.candidates[middleIndex];\r\n\r\n    while (middleIndex > firstIndex) {\r\n      if (pickTarget < middle[accumulatedFitnessSym]) {\r\n        lastIndex = middleIndex - 1;\r\n      } else if (pickTarget > middle[accumulatedFitnessSym]) {\r\n        firstIndex = middleIndex + 1;\r\n      }\r\n      middleIndex = Math.floor((firstIndex + lastIndex) / 2);\r\n      middle = population.candidates[middleIndex];\r\n    }\r\n    pick = population.candidates[middleIndex];\r\n  }\r\n\r\n  return pick === exclude ? repick(population, exclude!, pickRoulette) : pick;\r\n}\r\n","import { randomInclusive } from '../../common';\r\nimport { Chromosome, Gene } from './index';\r\nimport { memoizeByRef } from '../../common/memoize';\r\n\r\nexport function crossoverOrder1<T>(\r\n  parent1: Chromosome<T> | Gene<T>[],\r\n  parent2: Chromosome<T> | Gene<T>[]\r\n): [Gene<T>[], Gene<T>[]] {\r\n  const length = parent1.length;\r\n\r\n  if (length !== parent2.length) {\r\n    throw new Error('crossoverOrder1: chromosome length must be equal');\r\n  }\r\n  if (length < 2) {\r\n    throw new Error('crossoverOrder1: chromosome length must be > 1');\r\n  }\r\n\r\n  const start = randomInclusive(0, length - 2);\r\n  const end = randomInclusive(start + 1, length);\r\n\r\n  const parent1Iter = parent1[Symbol.iterator]();\r\n  const child1: T[] = [];\r\n  const child1Set = new Set<T>();\r\n\r\n  const parent2Iter = parent2[Symbol.iterator]();\r\n  const child2: T[] = [];\r\n  const child2Set = new Set<T>();\r\n\r\n  // middle section\r\n  for (let i = start; i < end; i++) {\r\n    child1[i] = parent1[i];\r\n    child1Set.add(child1[i]);\r\n    child2[i] = parent2[i];\r\n    child2Set.add(child2[i]);\r\n  }\r\n\r\n  // head section\r\n  for (let i = 0; i < start; i++) {\r\n    fillMissing(i, child1, child1Set, parent2Iter);\r\n    fillMissing(i, child2, child2Set, parent1Iter);\r\n  }\r\n\r\n  // tail section\r\n  for (let i = end; i < length; i++) {\r\n    fillMissing(i, child1, child1Set, parent2Iter);\r\n    fillMissing(i, child2, child2Set, parent1Iter);\r\n  }\r\n\r\n  return [child1, child2];\r\n}\r\n\r\nfunction fillMissing<T>(\r\n  index: number,\r\n  child: Gene<T>[],\r\n  childSet: Set<T>,\r\n  parentIter: IterableIterator<T>\r\n) {\r\n  while (true) {\r\n    let parentGene = parentIter.next();\r\n    if (!childSet.has(parentGene.value)) {\r\n      child[index] = parentGene.value;\r\n      childSet.add(child[index]);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nexport const reverse = memoizeByRef(<T>(candidate: Chromosome<T>) => candidate.slice(0).reverse());\r\n","// http://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nexport function shuffle<T>(array: T[], mutateArray: boolean = false): T[] {\r\n  const shuffled = mutateArray ? array : [...array];\r\n\r\n  let currentIndex = array.length;\r\n  let temporaryValue: T;\r\n  let randomIndex: number;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = shuffled[currentIndex];\r\n    shuffled[currentIndex] = shuffled[randomIndex];\r\n    shuffled[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return shuffled;\r\n}\r\n","import { randomExclusive } from '../../common';\r\nimport { Chromosome, Gene } from './index';\r\nimport { shuffle } from '../../common/shuffle';\r\n\r\nexport function mutateSwap1<T>(candidate: Chromosome<T>): Gene<T>[] {\r\n  const length = candidate.length;\r\n  if (length < 2) {\r\n    throw new Error('mutateSwap1: chromosome length must be > 1');\r\n  }\r\n\r\n  const mutated = [...candidate];\r\n  const index1 = randomExclusive(length);\r\n  const index2 = randomExclusive(length); // ignore if index2 === index1\r\n  mutated[index1] = candidate[index2];\r\n  mutated[index2] = candidate[index1];\r\n\r\n  return mutated;\r\n}\r\n\r\nexport function mutationRatePerGene(chromosomeLength: number, mutationRate: number) {\r\n  return 1 - (1 - mutationRate) ** (1 / chromosomeLength);\r\n}\r\n\r\nexport function mutateDeleteAndRepair<T>(candidate: Chromosome<T>, mutationRate: number) {\r\n  const rate = mutationRatePerGene(candidate.length, mutationRate);\r\n  const mutated: T[] = [];\r\n  const deleted: T[] = [];\r\n  const deletedIndexes: number[] = [];\r\n\r\n  // delete random genes\r\n  for (let i = 0; i < candidate.length; i++) {\r\n    if (Math.random() < rate) {\r\n      deletedIndexes.push(i);\r\n      deleted.push(candidate[i]);\r\n    } else {\r\n      mutated[i] = candidate[i];\r\n    }\r\n  }\r\n\r\n  if (deleted.length < 2) {\r\n    // no mutation, therefore no need to repair\r\n    return candidate;\r\n  }\r\n\r\n  // repair deleted genes\r\n  shuffle(deleted, true);\r\n  for (let i = 0; i < deleted.length; i++) {\r\n    mutated[deletedIndexes[i]] = deleted[i];\r\n  }\r\n\r\n  return mutated;\r\n}\r\n","import { fitnessSym } from './fitness';\r\nimport { Chromosome } from './index';\r\n\r\nexport class Population<T = unknown> {\r\n  fitnessSum: number = 0;\r\n\r\n  [Symbol.iterator] = this.candidates[Symbol.iterator].bind(this.candidates);\r\n\r\n  constructor(public candidates: Chromosome<T>[] = [], public isSortedByFitness = false) {\r\n    this.fitnessSum = candidates.reduce((sum, c) => sum + c[fitnessSym], 0);\r\n  }\r\n\r\n  push(candidate: Chromosome<T>) {\r\n    this.candidates.push(candidate);\r\n    this.fitnessSum += candidate[fitnessSym];\r\n    this.isSortedByFitness = false;\r\n  }\r\n\r\n  sortByFitnessAsc(): this {\r\n    this.candidates.sort((a, b) => a[fitnessSym] - b[fitnessSym]);\r\n    this.isSortedByFitness = true;\r\n    return this;\r\n  }\r\n\r\n  sortByFitnessDesc(): this {\r\n    this.candidates.sort((a, b) => b[fitnessSym] - a[fitnessSym]);\r\n    this.isSortedByFitness = true;\r\n    return this;\r\n  }\r\n\r\n  filter(predicate: (c: Chromosome) => boolean): Population<T> {\r\n    return new Population<T>(this.candidates.filter(predicate), this.isSortedByFitness);\r\n  }\r\n\r\n  elites(count: number): Population<T> {\r\n    if (!this.isSortedByFitness) {\r\n      throw new Error('Population: must be sorted first');\r\n    }\r\n    return new Population<T>(this.candidates.slice(0, count), true);\r\n  }\r\n\r\n  get length() {\r\n    return this.candidates.length;\r\n  }\r\n\r\n  get elite() {\r\n    if (!this.isSortedByFitness) {\r\n      throw new Error('Population: must be sorted first');\r\n    }\r\n    return this.candidates[0];\r\n  }\r\n}\r\n","import { action, computed, observable, toJS } from 'mobx';\r\nimport { pathLength } from '../algorithms/common/points';\r\nimport { City, generateCitiesByRandom, generateCitiesInCircle } from '../algorithms/common/cities';\r\nimport { findPathByNearestNeighbour } from '../algorithms/math/findPathByNearestNeighbour';\r\nimport { findPathByGaByBook } from '../algorithms/genetic/findPathByGaByBook';\r\nimport { findPathByGaByMe } from '../algorithms/genetic/findPathByGaByMe';\r\nimport { shuffle } from '../algorithms/common/shuffle';\r\n\r\nexport class RootState {\r\n  @observable cities: City[] = [];\r\n  @observable generatorChoice: any;\r\n  @observable nrOfCities: number = 50;\r\n  @observable path: City[] = [];\r\n\r\n  @observable pathByNearestNeighbour: City[] = [];\r\n\r\n  @observable pathByRandom: City[] = [];\r\n\r\n  @observable pathByGaByBook: City[] = [];\r\n  @observable generationsOfGaByBook: number = 0;\r\n  @observable populationOfGaByBook: number = 1000;\r\n  @observable crossoverRateOfGaByBook: number = 0.3;\r\n  @observable mutationRateOfGaByBook: number = 0.05;\r\n  @observable elitismRateOfGaByBook: number = 0.05;\r\n  @observable terminateGaByBook?: Function;\r\n\r\n  @observable pathByGaByMe: City[] = [];\r\n  @observable generationsOfGaByMe: number = 0;\r\n  @observable populationOfGaByMe: number = 1000;\r\n  @observable terminateGaByMe?: Function;\r\n\r\n  constructor() {\r\n    this.generateCitiesByRandom();\r\n  }\r\n\r\n  @action\r\n  resetCities(cities: City[]) {\r\n    this.cities = cities;\r\n    this.path = [];\r\n    this.pathByNearestNeighbour = [];\r\n    this.pathByRandom = [];\r\n    this.pathByGaByBook = [];\r\n    this.generationsOfGaByBook = 0;\r\n    this.pathByGaByMe = [];\r\n    this.generationsOfGaByMe = 0;\r\n    this.stopGAs();\r\n  }\r\n\r\n  @action\r\n  stopGAs() {\r\n    this.terminateGaByBook = this.terminateGaByBook ? this.terminateGaByBook() : undefined;\r\n    this.terminateGaByMe = this.terminateGaByMe ? this.terminateGaByMe() : undefined;\r\n  }\r\n\r\n  @action\r\n  generateByLastChoice() {\r\n    this.generatorChoice();\r\n  }\r\n\r\n  @action\r\n  generateCitiesByRandom() {\r\n    this.nrOfCities = Math.max(this.nrOfCities || 0, 3);\r\n    this.resetCities(generateCitiesByRandom(this.nrOfCities));\r\n    this.generatorChoice = this.generateCitiesByRandom;\r\n  }\r\n\r\n  @action\r\n  generateCitiesInCircle() {\r\n    this.nrOfCities = Math.max(this.nrOfCities || 0, 3);\r\n    this.resetCities(generateCitiesInCircle(this.nrOfCities));\r\n    this.generatorChoice = this.generateCitiesInCircle;\r\n  }\r\n\r\n  @action\r\n  findPathByNearestNeighbour() {\r\n    this.stopGAs();\r\n    this.path = findPathByNearestNeighbour(this.cities);\r\n    this.pathByNearestNeighbour = this.path;\r\n  }\r\n\r\n  @action\r\n  findPathByRandom() {\r\n    this.stopGAs();\r\n    this.path = shuffle(this.cities);\r\n    this.pathByRandom = this.path;\r\n  }\r\n\r\n  @action\r\n  findPathByGaByBook() {\r\n    this.stopGAs();\r\n\r\n    this.populationOfGaByBook = Math.max(this.populationOfGaByBook || 0, 2);\r\n    this.crossoverRateOfGaByBook = Math.max(this.crossoverRateOfGaByBook || 0, 0);\r\n    this.crossoverRateOfGaByBook = Math.min(this.crossoverRateOfGaByBook || 0, 1);\r\n    this.mutationRateOfGaByBook = Math.max(this.mutationRateOfGaByBook || 0, 0);\r\n    this.mutationRateOfGaByBook = Math.min(this.mutationRateOfGaByBook || 0, 1);\r\n    this.elitismRateOfGaByBook = Math.max(this.elitismRateOfGaByBook || 0, 0);\r\n    this.elitismRateOfGaByBook = Math.min(this.elitismRateOfGaByBook || 0, 1);\r\n\r\n    this.terminateGaByBook = findPathByGaByBook({\r\n      cities: toJS(this.cities),\r\n      populationSize: this.populationOfGaByBook,\r\n      crossoverRate: this.crossoverRateOfGaByBook,\r\n      mutationRate: this.mutationRateOfGaByBook,\r\n      elitismRate: this.elitismRateOfGaByBook,\r\n      maxStaleGenerations: 20,\r\n      reporting: report => {\r\n        if (this.terminateGaByBook) {\r\n          this.path = report.path;\r\n          this.pathByGaByBook = report.path;\r\n          this.generationsOfGaByBook = report.generations;\r\n        }\r\n\r\n        if (report.isTerminated) {\r\n          this.terminateGaByBook = undefined;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  @action\r\n  findPathByGaByMe() {\r\n    this.stopGAs();\r\n\r\n    this.populationOfGaByMe = Math.max(this.populationOfGaByMe || 0, 2);\r\n\r\n    this.terminateGaByMe = findPathByGaByMe({\r\n      cities: toJS(this.cities),\r\n      populationSize: this.populationOfGaByMe,\r\n      maxStaleGenerations: 20,\r\n      reporting: report => {\r\n        if (this.terminateGaByMe) {\r\n          this.path = report.path;\r\n          this.pathByGaByMe = report.path;\r\n          this.generationsOfGaByMe = report.generations;\r\n        }\r\n\r\n        if (report.isTerminated) {\r\n          this.terminateGaByMe = undefined;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  @computed\r\n  get pathLengthByNearestNeighbour() {\r\n    return pathLength(this.pathByNearestNeighbour);\r\n  }\r\n\r\n  @computed\r\n  get pathLengthByRandom() {\r\n    return pathLength(this.pathByRandom);\r\n  }\r\n\r\n  @computed\r\n  get pathLengthByGaByBook() {\r\n    return pathLength(this.pathByGaByBook);\r\n  }\r\n\r\n  @computed\r\n  get pathLengthByGaByMe() {\r\n    return pathLength(this.pathByGaByMe);\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport { RootState } from './state/RootState';\n\nconst rootState = new RootState();\n\nReactDOM.render(<App state={rootState} />, document.getElementById('root'));\n","import { distance, Point } from '../common/points';\r\n\r\nexport function findPathByNearestNeighbour<T extends Point>(points: T[]): T[] {\r\n  const path: T[] = [];\r\n\r\n  if (points.length) {\r\n    const unvisited = new Set(points);\r\n\r\n    let current = points[0];\r\n    unvisited.delete(current);\r\n    path.push(current);\r\n\r\n    while (unvisited.size) {\r\n      const iterator = unvisited.values();\r\n      let minCity = iterator.next().value;\r\n      let minDist = distance(minCity, current);\r\n\r\n      for (const city of iterator) {\r\n        if (city.x <= minDist && city.y <= minDist) {\r\n          const dist = distance(city, current);\r\n          if (dist < minDist) {\r\n            minCity = city;\r\n            minDist = dist;\r\n          }\r\n        }\r\n      }\r\n\r\n      current = minCity;\r\n      unvisited.delete(current);\r\n      path.push(current);\r\n    }\r\n  }\r\n\r\n  return path;\r\n}\r\n","import { Point } from '../common/points';\r\nimport { pickRoulette } from './common/selection';\r\nimport { crossoverOrder1, reverse } from './common/crossover';\r\nimport { mutateSwap1 } from './common/mutation';\r\nimport { addFitness, fitnessSym } from './common/fitness';\r\nimport { Population } from './common/Population';\r\nimport { shuffle } from '../common/shuffle';\r\n\r\nexport function findPathByGaByBook<T extends Point>(args: {\r\n  cities: T[];\r\n  populationSize: number;\r\n  crossoverRate: number;\r\n  mutationRate: number;\r\n  elitismRate?: number;\r\n  maxGenerations?: number;\r\n  maxStaleGenerations?: number;\r\n  reporting: (report: { path: T[]; generations: number; isTerminated: boolean }) => void;\r\n}) {\r\n  let generations = 0;\r\n\r\n  if (!args.cities.length || args.populationSize < 2) {\r\n    return;\r\n  }\r\n\r\n  const maxGenerations = args.maxGenerations || Infinity;\r\n  const maxStaleGenerations = args.maxStaleGenerations || Infinity;\r\n\r\n  // Initialize population\r\n  let population = new Population<T>();\r\n  for (let i = 0; i < args.populationSize; i++) {\r\n    const candidate = addFitness(shuffle(args.cities));\r\n    population.push(candidate);\r\n  }\r\n  population.sortByFitnessAsc();\r\n\r\n  let isTerminated = false;\r\n  let staleGenerations = 0;\r\n  let bestFitness = population.elite[fitnessSym];\r\n\r\n  function terminate() {\r\n    isTerminated = true;\r\n  }\r\n\r\n  function evolve() {\r\n    // Elitism\r\n    const newPopulation = args.elitismRate\r\n      ? population.elites(population.length * args.elitismRate)\r\n      : new Population<T>();\r\n\r\n    while (newPopulation.length < args.populationSize) {\r\n      // Selection\r\n      let candidate = pickRoulette(population);\r\n\r\n      // Crossover\r\n      if (Math.random() < args.crossoverRate) {\r\n        const mate = pickRoulette(population, candidate);\r\n        const children = new Population(\r\n          crossoverOrder1(candidate, mate)\r\n            .concat(crossoverOrder1(candidate, reverse(mate))) // because of symmetric solutions\r\n            .map(addFitness)\r\n        ).sortByFitnessAsc();\r\n        candidate = children.elite;\r\n      }\r\n\r\n      // Mutation\r\n      if (Math.random() < args.mutationRate) {\r\n        candidate = addFitness(mutateSwap1(candidate));\r\n      }\r\n\r\n      newPopulation.push(candidate);\r\n    }\r\n\r\n    population = newPopulation;\r\n    population.sortByFitnessAsc();\r\n    generations++;\r\n\r\n    if (population.elite[fitnessSym] < bestFitness) {\r\n      bestFitness = population.elite[fitnessSym];\r\n      staleGenerations = 0;\r\n    } else {\r\n      staleGenerations++;\r\n    }\r\n\r\n    if (isTerminated || generations > maxGenerations || staleGenerations > maxStaleGenerations) {\r\n      isTerminated = true;\r\n      clearInterval(evolution);\r\n    }\r\n\r\n    args.reporting({ path: population.elite, generations, isTerminated });\r\n  }\r\n\r\n  const evolution = setInterval(evolve);\r\n\r\n  return terminate;\r\n}\r\n","import { Point } from '../common/points';\r\nimport { pickRoulette } from './common/selection';\r\nimport { crossoverOrder1, reverse } from './common/crossover';\r\nimport { mutateDeleteAndRepair } from './common/mutation';\r\nimport { addFitness, fitnessSym } from './common/fitness';\r\nimport { Population } from './common/Population';\r\nimport { shuffle } from '../common/shuffle';\r\n\r\nexport function findPathByGaByMe<T extends Point>(args: {\r\n  cities: T[];\r\n  populationSize: number;\r\n  maxGenerations?: number;\r\n  maxStaleGenerations?: number;\r\n  reporting: (report: { path: T[]; generations: number; isTerminated: boolean }) => void;\r\n}) {\r\n  if (!args.cities.length || args.populationSize < 2) {\r\n    return;\r\n  }\r\n\r\n  const maxGenerations = args.maxGenerations || Infinity;\r\n  const maxStaleGenerations = args.maxStaleGenerations || Infinity;\r\n\r\n  // Initialize population\r\n  let population = new Population<T>();\r\n  for (let i = 0; i < args.populationSize; i++) {\r\n    const candidate = addFitness(shuffle(args.cities));\r\n    population.push(candidate);\r\n  }\r\n  population.sortByFitnessAsc();\r\n\r\n  let isTerminated = false;\r\n  let generations = 0;\r\n  let staleGenerations = 0;\r\n  let bestFitness = population.elite[fitnessSym];\r\n\r\n  function terminate() {\r\n    isTerminated = true;\r\n  }\r\n\r\n  function evolve() {\r\n    const tempPopulation = new Population<T>();\r\n\r\n    while (tempPopulation.length < args.populationSize) {\r\n      // Selection\r\n      let candidate = pickRoulette(population);\r\n      let mate = pickRoulette(population, candidate);\r\n\r\n      // Crossover\r\n      const children = new Population(\r\n        crossoverOrder1(candidate, mate)\r\n          .concat(crossoverOrder1(candidate, reverse(mate))) // because of symmetric solutions\r\n          .map(addFitness)\r\n      ).sortByFitnessAsc();\r\n      candidate = children.elite;\r\n\r\n      // Mutation\r\n      const mutationRate = Math.random();\r\n      candidate = addFitness(mutateDeleteAndRepair(candidate, mutationRate));\r\n\r\n      tempPopulation.push(candidate);\r\n    }\r\n    tempPopulation.sortByFitnessAsc();\r\n\r\n    const newPopulation = new Population<T>();\r\n    const iter = population[Symbol.iterator]();\r\n    const tempIter = tempPopulation[Symbol.iterator]();\r\n    let candidate = iter.next().value;\r\n    let tempCandidate = tempIter.next().value;\r\n\r\n    // Elitism\r\n    while (newPopulation.length < args.populationSize) {\r\n      if (candidate[fitnessSym] < tempCandidate[fitnessSym]) {\r\n        newPopulation.push(candidate);\r\n        candidate = iter.next().value;\r\n      } else {\r\n        newPopulation.push(tempCandidate);\r\n        tempCandidate = tempIter.next().value;\r\n      }\r\n    }\r\n\r\n    population = newPopulation;\r\n    population.sortByFitnessAsc();\r\n    generations++;\r\n\r\n    if (population.elite[fitnessSym] < bestFitness) {\r\n      bestFitness = population.elite[fitnessSym];\r\n      staleGenerations = 0;\r\n    } else {\r\n      staleGenerations++;\r\n    }\r\n\r\n    if (isTerminated || generations > maxGenerations || staleGenerations > maxStaleGenerations) {\r\n      isTerminated = true;\r\n      clearInterval(evolution);\r\n    }\r\n\r\n    args.reporting({ path: population.elite, generations, isTerminated });\r\n  }\r\n\r\n  const evolution = setInterval(evolve);\r\n\r\n  return terminate;\r\n}\r\n"],"sourceRoot":""}